{
  "name": "markdown-documentation-generator",
  "version": "2.1.0",
  "description": "A fork of markdown-styleguide-generator. Searches files for markdown and generates a static style/documentation guide.",
  "main": "index.js",
  "scripts": {
    "test": "nodemon --ignore */styleguide/ -e js,hbs,css,styleguide index.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/UWHealth/markdown-documentation-generator.git"
  },
  "keywords": [
    "markdown",
    "style",
    "guide",
    "css",
    "sass",
    "documentation"
  ],
  "author": {
    "name": "Chris Lee",
    "email": "clee5@uwhealth.org"
  },
  "license": "GPL-3.0",
  "bugs": {
    "url": "https://github.com/UWHealth/markdown-documentation-generator/issues"
  },
  "homepage": "https://github.com/UWHealth/markdown-documentation-generator#readme",
  "dependencies": {
    "chalk": "^1.1.3",
    "cheerio": "^0.20.0",
    "fs-extra": "^0.30.0",
    "handlebars": "^4.0.0",
    "highlight.js": "^9.5.0",
    "lodash": "^4.13.1",
    "marked": "^0.3.5",
    "swag": "^0.7.0",
    "walk": "^2.3.9"
  },
  "bin": {
    "md_documentation": "index.js"
  },
  "readme": "# markdown-documentation-generator\n\n### Screenshot\n![Screenshot](https://raw.githubusercontent.com/UWHealth/markdown-documentation-generator/master/docs/screenshot-sample.png)\n\n### What is a living style guide?\n> To me, a style guide is a living document of [style] code, which details all the various elements and coded modules of your site or application. Beyond its use in consolidating the front-end code, it also documents the visual language, such as header styles and color palettes, used to create the site. This way, it’s a one-stop place for the entire team—from product owners and producers to designers and developers—to reference when discussing site changes and iterations. [...] - [Susan Robertson/A list apart](http://alistapart.com/article/creating-style-guides)\n\nThe _living_ part means that it uses your **live** css. If you change your css files, the style guide will change as well!\n\n### What this tool does, short version:\nThis tool will search all your style files (your `.css`, `.scss` `_partial.scss`, `.less`, `.whatever`) for comments and create a html file living style guide for your developers to use!\n\nIn contrast to other style guide generators, this tool generates **a single file**, ready to be uploaded to your website/CMS(-like system).\n\n### What this tool does, longer version:\n\nStyle guides generated by this tool do not contain any css style!\n\nThe style guide simply contains HTML markup exemplifying how to use your css rules. That means that the generated html file will not do any good on it's own. Instead the intended use is to upload the generated HTML to your site where it will inherit your site's css. This also means that if you change your css - the look of the styleguide will change as well. This way **the styleguide will always tell the truth**.\n\nIf you're using a CMS(-like system), this usually means that you create an article somewhere only accessible by developers and paste the content of the generated html file into that article (usually you'll have a `source` mode in your article editor).\n\nThe more tech savvy will make some kind of build tool to upload the style guide automagically, or integrate generation and uploading with the CI system.\n\n## Install\n\nRequires [Node.js](http://nodejs.org/) (if unsure if you have node install, run `node -v` in a console.)\n\nInstall with npm:\n\n```\nnpm install -g markdown-documentation-generator\n```\n\nand then run:\n```\ncd /your/web/project\nstyleguide\n```\n\nTo override default configuration and create a `.styleguide` config file in the current working directory, you may run:\n```\nstyleguide init\n```\n\n\n## Usage\nComment your css/scss/less/whatever files. Use Markdown in the comments:\n\nExample:\n\n\n\t/* SG\n\t# Glyphs/Style\n\n\tYou may resize and change the colors of the icons with the `glyph-`-classes. Available sizes and colors listed:\n\n\t```html_example\n\t<p>\n\t    <i class=\"icon-search glyph-1x\"></i>\n\t    <i class=\"icon-search glyph-1_5x\"></i>\n\t    <i class=\"icon-search glyph-2x\"></i>\n\t    <i class=\"icon-search glyph-3x\"></i>\n\t</p>\n\t<p>\n\t    <i class=\"icon-search glyph-red\"></i>\n\t</p>\n\t```\n\t*/\n\n\ta [class^=\"icon-\"],\n\ta [class*=\" icon-\"] {\n\t\ttext-decoration: none;\n\t}\n\n\t[class^=\"icon-\"],\n\t[class*=\" icon-\"] {\n\t\t&.glyph-1x { font-size: 1em; }\n\t\t&.glyph-1_5x { font-size: 1.5em; }\n\t\t&.glyph-2x { font-size: 2em; }\n\t\t&.glyph-3x { font-size: 3em; }\n\t}\n\n\t.glyph-red {\n\t\tcolor: $moh-red;\n\t}\n\n\nThis will be rendered as:\n\n![Screenshot](https://raw.githubusercontent.com/emiloberg/markdown-styleguide-generator/master/docs/screenshot-rendered-glyphs.png)\n\n* `cd` to the web project (any folder containing css/scss/less files. The tool will search nested folders).\n* run `styleguide` to generate style guide.\n* wait a few seconds and a `styleguide.html` is generated in `styleguide/dist` (this is configurable, see _Configuration_).\n* ???\n* profit\n\n## Syntax\nBest described by going through the example above line by line.\n##### Line 1\n\n\n\t/* SG\n\n\n`/*` is just an ordinary css comment. The `SG` means that this is a _style guide_ comment. Only comments beginning with `/* SG` will be included in the style guide, all other comments are ignored.\n\n\n##### Line 2\n\n\n\t# Glyphs/Style\n\n\nEvery style guide comment **must** have a heading. `#` is the Markdown syntax for a heading (equivalent to h1). The name of this section will be _Glyphs_ (which will be shown in the menu). The subsection will be  _Style_ (which will be shown in the menu when it's expanded). The heading (the part before the slash) is required, the slash and the subsection are optional.\n\n\n##### Line 4\n\n\n\tYou may resize and change the colors of the icons with the `glyph-`-classes. Available sizes and colors listed:\n\n\nThe comment will be shown in the style guide. Describe your css rules! Feel free to use [Markdown syntax](https://help.github.com/articles/markdown-basics/). The comment is optional but be nice to your developers!\n\n\n##### Line 6-16\n\n\n\t```\n\t<p>\n\t    <i class=\"icon-search glyph-1x\"></i>\n\t    <i class=\"icon-search glyph-1_5x\"></i>\n\t    <i class=\"icon-search glyph-2x\"></i>\n\t    <i class=\"icon-search glyph-3x\"></i>\n\t</p>\n\t<p>\n\t    <i class=\"icon-search glyph-red\"></i>\n\t</p>\n\t```\n\n\nThis is where you write some HTML code to describe how to use your css rules. The HTML will be a) Rendered and used as an example, and b) Outputed with syntax highlighting. The HTML part is optional but most of the time you'll use it. Notice that the code is fenced in tripple backticks as per Markdown syntax.\n\n\n##### Line 17\n\n\n\t*/\n\n\nJust closing the css comment.\n\n\n##### Line 18+\n\n\n\ta [class^=\"icon-\"],\n\ta [class*=\" icon-\"] {\n\t\ttext-decoration: none;\n\t}\n\t...\n\n\nOrdinary css!\n\n\n## Configuration\n\nIf you want to override the default configuration you may create a `.styleguide` file in your project folder (the same folder you run `styleguide` in).\n\nEasiest way to create a `.styleguide` file is to run `styleguide init` which will give you a boilerplate configuration file in the current working directory.\n\n```javascript\n{\n\t\"sgComment\": \"SG\",   // If you want to begin a style guide comment\n\t                     // with something else than default: \"/* SG\"\n\n\t\"srcFolder\": \"\",     // Folder with your css files. Will search all subfolders.\n\t                      //Default: current working directory.\n\n\t\"outputFile\": \"\",     // Where to output the style guide?\n\t                      // Default: \"styleguide/dist/styleguide.html\"\n\n\t\"highlightStyle\": \"\", // Syntax highlighting style.  \n\t                      // Syntax highlighting relies on highlight.js.\n\t                      // See available styles here: https://highlightjs.org/static/demo/\n\t                      // and their internal names here:\n\t                      // https://github.com/isagalaev/highlight.js/tree/master/src/styles\n\t                      // Default: \"github\"\n\t\"highlightFolder\": \"\",// folder to look for highlight stylse in.\n\t\t\t\t\t\t  // Default is highlight.js folder which is installed as\n\t\t\t\t\t\t  // a dependency to this package\n\n\t\"templateFile\": \"\",   // Path to custom Handlebars template\n\n\t\"themeFile\": \"\",      // Path to custom  CSS file to be included in the style guide\n\n\t\"excludeDirs\": [\"\"],  // Array of folders not to search for css files.\n\t                      // default: [\"target\",\"node_modules\"]\n\n\t\"fileExtensions\": {}, // File extensions to search for style guide comments\n\t                      // default: {scss: true, sass: true, css: true, less: true}\n\n\t\"customVars\": {}      // Holds an object with custom variables which will be\n\t                      // available in the handlebars template. e.g:\n\t                      // customVars: { sampleVar: 'Hi there' }\n\t                      // 'Hi there' will be printed if you request\n\t                      // {{customVars/sampleVar}} in the handlebars template.\n\n\t                      // ADVANCED\n\n\t\"walkerOptions\": {\n\t\t\"followLinks\": bool // Follow symlinks when searching for files?\n\t\t                    // default: false\n\t\t                    // You may also add additional walker options,\n\t\t                    // see: https://github.com/coolaj86/node-walk\n\t},\n    \"markedOptions\": { \t\t// Options for marked markdown generator\n\t\t\"gfm\": bool \t\t// Use Github-flavored markdown?\n\t\t                    // default: true\n\t\t                    // You may also add additional marked options,\n\t\t                    // see: https://github.com/chjj/marked\n\t},\n\t\"jqFile\": \"\"         // jQuery file, is included in package.\n}\n```\n\n\n## Custom look and feel\n\nThe final look and feel of the style guide is based on three different files:\n* [template file](https://github.com/emiloberg/markdown-styleguide-generator/blob/master/template/template.html) - Handlebars template which will produce the final html.\n* [theme file](https://github.com/emiloberg/markdown-styleguide-generator/blob/master/template/theme.css) - css file which will be included in the template file.\n* highlight file - Syntax highlighting relies on [highlight.js](https://highlightjs.org/). To change the highlight style - set the `highlightStyle` to the  name of the style (filename minus `.css`, [see the list of styles](https://github.com/isagalaev/highlight.js/tree/master/src/styles) ) in your `.styleguide`. See the [demoes of available styles](https://highlightjs.org/static/demo/).\n\nTo create your own template/theme, copy the [template.html and theme.css](https://github.com/emiloberg/markdown-styleguide-generator/tree/master/template) to a folder of your choice. Then set the `templateFile` and `themeFile` in your `.styleguide` to the corresponding paths.\n\nThe Javascript object which you may use in your template file looks like this:\n\n```javascript\n{\n\tsections: [\n\t\t{\n\t\t\tid: 'HTML safe unique identifier',\n\t\t\tsection: 'Section Name (from the \"# Section/Heading\" Markdown)',\n\t\t\theading: 'Heading Name (from the \"# Section/Heading\" Markdown)',\n\t\t\tcode: 'HTML Code',\n\t\t\tmarkup: 'Highlighted HTML Code',\n\t\t\tcomment: 'Markdown comment converted to HTML',\n\t\t},\n\t\t{...}\n\t],\n\tmenu: [\n\t\t{\n\t\t\tname: 'Section Name (one per unique \"# Section\")',\n\t\t\theadings: [\n\t\t\t\t{\n\t\t\t\t\tid: 'HTML safe unique identifier',\n\t\t\t\t\tname: 'Heading Name'\n\t\t\t\t},\n\t\t\t\t{...}\n\t\t\t]\n\t\t},\n\t\t{...}\n\t]\n}\n```\n\n## Run with gulp/grunt\nIf you want to re-create the style guide automagically every time a stylesheet file is changed, you can run it with your favorite task runner. One way of running it with gulp would be using gulp-shell to execute the shell command `styleguide` when a file is changed.\n\nSample gulp script:\n```\nvar gulp  = require('gulp');\nvar shell = require('gulp-shell');\nvar watch = require('gulp-watch');\n\ngulp.task('watch', function() {\n  gulp.watch('path/to/watch/for/changes/**/*.scss', ['makeStyleguide']);\n});\n\ngulp.task('makeStyleguide',\n  shell.task(\n    ['styleguide']\n  )\n);\n\ngulp.task('default', ['watch']);\n```\n",
  "readmeFilename": "README.md",
  "gitHead": "058fe1fab36c2957cff03ea43d896ec7f47acddf",
  "_id": "markdown-documentation-generator@1.3.0",
  "_shasum": "3803bbd214de1ddbbb8e1c1c9fac54ce79711d7a",
  "_from": "markdown-documentation-generator@>=1.2.0 <2.0.0"
}
